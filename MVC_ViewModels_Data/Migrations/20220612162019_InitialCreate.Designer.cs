// <auto-generated />
using MVC_ViewModels_Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVC_ViewModels_Data.Migrations
{
    [DbContext(typeof(ExDbContext))]
    [Migration("20220612162019_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVC_ViewModels_Data.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CountryId = 1,
                            Name = "London"
                        },
                        new
                        {
                            CityId = 2,
                            CountryId = 1,
                            Name = "Birmingham"
                        },
                        new
                        {
                            CityId = 3,
                            CountryId = 2,
                            Name = "Stockholm"
                        },
                        new
                        {
                            CityId = 4,
                            CountryId = 2,
                            Name = "Gothenburg"
                        });
                });

            modelBuilder.Entity("MVC_ViewModels_Data.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "England"
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "Sweden"
                        });
                });

            modelBuilder.Entity("MVC_ViewModels_Data.Models.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageID");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            LanguageID = 1,
                            Name = "Swedish"
                        },
                        new
                        {
                            LanguageID = 2,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("MVC_ViewModels_Data.Models.LanguagePeople", b =>
                {
                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("LanguageID", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("LanguagePeople");

                    b.HasData(
                        new
                        {
                            LanguageID = 1,
                            PersonId = 1
                        });
                });

            modelBuilder.Entity("MVC_ViewModels_Data.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasMaxLength(15);

                    b.Property<string>("ContactNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("PersonId");

                    b.HasIndex("CityId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            CityId = 1,
                            ContactNumber = "034-4242-657",
                            Name = "Priya"
                        },
                        new
                        {
                            PersonId = 2,
                            CityId = 4,
                            ContactNumber = "034-4242-658",
                            Name = "Keerthi"
                        });
                });

            modelBuilder.Entity("MVC_ViewModels_Data.Models.City", b =>
                {
                    b.HasOne("MVC_ViewModels_Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_ViewModels_Data.Models.LanguagePeople", b =>
                {
                    b.HasOne("MVC_ViewModels_Data.Models.Language", "Language")
                        .WithMany("LanguagePeople")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_ViewModels_Data.Models.Person", "Person")
                        .WithMany("LanguagePeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_ViewModels_Data.Models.Person", b =>
                {
                    b.HasOne("MVC_ViewModels_Data.Models.City", "City")
                        .WithMany("Peoples")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
